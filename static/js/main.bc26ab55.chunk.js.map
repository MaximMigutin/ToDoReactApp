{"version":3,"sources":["logo.svg","components/Demo1.js","components/Demo.js","components/Child.js","components/Parent.js","components/Sample.js","components/AddToDo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Demo1","Component","props","Title","Child","this","AddTodo","state","Id","Status","handleIdChange","event","setState","target","value","handleTitleChange","handleStatusChange","handleToDoSubmit","preventDefault","onAdd","onSubmit","className","onChange","placeholder","classname","classNmae","type","TodoList","todos","deleteToDo","todo","filteredItems","filter","x","editTodo","map","addToDo","key","style","color","onClick","icon","library","add","faTrash","faEdit","faPlus","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bc26ab55.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\n\n// export default function Demo1() {\n//     return (\n//         <div>\n//             <h1>Hello from Functional Component!</h1>\n//     </div>\n//     );\n// }\n\nconst Demo1 = (props) => {\n    return (\n        <div>\n            <h1> Hello from Functional component the 2nd way!</h1>\n            <h2>{props.Title}</h2>\n        </div>    \n    )\n}\n\n\nexport default Demo1;","import React, {Component} from \"react\";\n\nexport default class Demo extends Component {\n    render() {\n        return (\n            <div>\n                <h1>Hello World!</h1>\n            </div>\n        );\n    }\n}\n\n","import React, {Component} from 'react';\n\nexport default class Child extends Component {\n    render() {\n        return (\n            <div>\n                <h3>I am a Child Component</h3>\n                <h3>{this.props.Title}</h3>\n            </div>\n        );\n    }\n}","import React, {Component} from 'react';\nimport Child from './Child';\nimport Demo1 from './Demo1';\n\nexport default class Parent extends Component {\n    render() {\n        return (\n            <div>\n                <h1>I am a Parent Component</h1>\n                <Child Title=\"I am text from Parent Component\"></Child>\n                <Demo1 Title=\"I am Text from functional Component\"></Demo1>\n            </div>\n            );\n    }\n }","import React, {Component} from \"react\";\n\nexport default class Sample extends Component {\nstate = {\n    a: 'Hello'\n};\n\nhadleButtonClick = () => {\n    console.log(\"Inside Button Click\");\n    // this.state.a = \"You pressed the Button\"; wrong way\n    this.setState({a: \"you clicked the Button\"});\n};\n\nrender() {\n    return (\n        <div>\n            <h1>{this.state.a}</h1>\n            <button type=\"button\" onClick={this.hadleButtonClick}>Click Me</button>\n        </div>\n    );\n    }\n}","import React, {Component} from \"react\";\n\nexport default class AddTodo extends Component {\n    state = {\n        Id: \"\",\n        Title: \"\",\n        Status: \"Pending\"\n    };\n\nhandleIdChange = (event) => {\n    this.setState({\n        Id: event.target.value\n    });\n};\nhandleTitleChange = (event) => {\n    this.setState({\n        Title: event.target.value\n    });\n};\nhandleStatusChange = (event) => {\n    this.setState({\n        Status: event.target.value\n    });\n};\n\nhandleToDoSubmit = (event) => {\n    event.preventDefault();\n    this.props.onAdd({\n        Id: this.state.Id,\n        Title: this.state.Title,\n        Status: this.state.Status\n    });\n};\n\n    render() {\n        return (\n        <div>\n            <h3>\n                Add ToDo\n            </h3>\n            <form onSubmit={this.handleToDoSubmit}>\n                <div className=\"form-group\">\n                    <input value={this.state.Id} onChange={this.handleIdChange}\n        className=\"form-control\" placeholder=\"Enter Id\" />\n                </div>\n                <div className=\"form-group\">\n                    <input value={this.state.Title} onChange={this.handleTitleChange}\n        classname=\"form-control\" placeholder=\"Enter Title\" />\n                </div>\n                <div className=\"form-group\">\n                    <select value={this.state.Status} onChange={this.handleStatusChange}\n        classNmae=\"form-control\">\n                            <option value=\"Done\">Done</option>\n                            <option value=\"Pending\">Pending</option>\n                            </select>\n                </div>\n                <button type=\"submit\" classname=\"form-control btn btn-primary\">Add Todo</button>\n            </form>\n        </div>\n            );\n    }\n}","import React, {Component} from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport AddTodo from './AddToDo';\n\nexport default class TodoList extends Component {\nstate = {\n    todos: [\n        {Id:'1', Title: 'Push your code to github', Status: 'Done'},\n        {Id: '2', Title: 'Eamil to your manager', Status: 'Pending'}\n    ]\n};\n\ndeleteToDo = (todo) => {\n    const filteredItems = this.state.todos.filter(x => x.Id !== todo.Id);\n    this.setState({\n        todos: filteredItems\n    });\n};\n\neditTodo = (x) => {\n    this.setState(state => ({\n        todos: state.todos.map(todo => {\n        if (todo.Id === x.Id) {\n            return {\n                ...todo, // â€¦ - Spread Operator. it will keep our todos array intact and in the next line, we are updating the value of the status attribute, so id and title will not be changed\n                Status: todo.Status === \"Done\" ? \"Pending\" : \"Done\"\n            };\n        } else {\n            return todo;\n        }\n    })\n    }));\n};\n\naddToDo = (todo) => {\n    this.setState({\n        todos: [...this.state.todos, todo]\n    });\n};\n\nrender() {\n    return (\n        <div>\n            // here we're declaring a property of child component: 'onAdd' of AddToDo\n            <AddTodo onAdd={this.addToDo}></AddTodo> \n            <h1>TodoList</h1>\n                <table className=\"table\">\n                    <thread>\n                        <tr>\n                            <th>Id</th>\n                            <th>Title</th>\n                            <th>Status</th>\n                            <th>Action</th>\n                        </tr>\n                        </thread>\n                        <tbody>\n                            {this.state.todos.map(x => {\n                                return (\n                                    <tr key={x.Id}>\n                                    <td>{x.Id}</td>\n                                    <td>{x.Title}</td>\n                                    <td style={{ color: x.Status ===\"Done\" ? \"green\" : \"red\"}}>{x.Status}</td>\n                                    <td>\n                                        <button className=\"btn btn-primary\" onClick={() => this.deleteToDo(x)}>\n                                            <span>\n                                                <FontAwesomeIcon icon=\"trash\"></FontAwesomeIcon>\n                                            </span>\n                                        </button>\n                                        <button className=\"btn btn-primary\" onClick={() => \n                                        this.editTodo(x)}>\n                                            <span>\n                                                <FontAwesomeIcon icon=\"edit\"></FontAwesomeIcon>\n                                            </span>\n                                        </button>\n                                    </td>\n                                    </tr>\n                                );\n                            })}\n                        </tbody>\n                        </table>\n        </div>\n    );\n}\n}","import React from 'react';\nimport Demo from './components/Demo';\nimport Demo1 from './components/Demo1';\nimport Parent from './components/Parent';\nimport Sample from './components/Sample';\nimport TodoList from './components/TodoList'\nimport logo from './logo.svg';\nimport './App.css';\nimport {library} from \"@fortawesome/fontawesome-svg-core\";\nimport {faTrash, faPlus, faEdit} from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(faTrash, faEdit, faPlus);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <h1>App component</h1>\n      <Demo></Demo>\n      <Demo1></Demo1>\n      <Parent></Parent>\n      <Sample></Sample> */}\n      <TodoList></TodoList>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}